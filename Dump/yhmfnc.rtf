{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <Wire.h>\
#include <QuickPID.h>\
#include <MPU6050.h>  // Use the MPU6050 library\
\
// Define motor control pins\
#define motorA1 5  // IN1 for Motor A (D1 on NodeMCU)\
#define motorA2 4  // IN2 for Motor A (D2 on NodeMCU)\
#define motorB1 0  // IN3 for Motor B (D3 on NodeMCU)\
#define motorB2 2  // IN4 for Motor B (D4 on NodeMCU)\
\
#define NUM_SENSORS 8\
int sensorPins[NUM_SENSORS] = \{D1, D2, D3, D4, D5, D6, D7, D8\};  // Adjust to your sensor array\
int sensorValues[NUM_SENSORS];  // Store sensor readings\
int baseSpeed = 100;            // Base speed of the motors\
int maxSpeed = 255;             // Maximum speed of the motors\
\
// PID parameters\
float kp = 1.0, ki = 0.0, kd = 0.0;  // Initial PID parameters (adjust dynamically)\
float input, output, setpoint;\
int error = 0, lastError = 0;      // Error tracking for PID\
bool lineDetected = false;         // Detect if the line is present\
bool optimizingPath = false;       // Flag for path optimization\
\
QuickPID myPID(&input, &output, &setpoint, kp, ki, kd);\
\
// For A* algorithm\
struct Node \{\
  int x, y;\
  float cost, heuristic;\
  Node* parent;\
  Node(int _x, int _y, float _cost, float _heuristic, Node* _parent) \
    : x(_x), y(_y), cost(_cost), heuristic(_heuristic), parent(_parent) \{\}\
\};\
std::vector<Node*> path, optimizedPath;\
\
// MPU6050 object\
MPU6050 mpu;\
\
void setup() \{\
  Serial.begin(9600);\
  \
  // Motor control pin initialization\
  pinMode(motorA1, OUTPUT);\
  pinMode(motorA2, OUTPUT);\
  pinMode(motorB1, OUTPUT);\
  pinMode(motorB2, OUTPUT);\
\
  // Initialize PID\
  myPID.SetMode(QuickPID::AUTOMATIC);\
  myPID.SetOutputLimits(-maxSpeed, maxSpeed);  // Limit the motor speeds\
\
  // Sensor setup (using digitalRead for RLS08 sensor array)\
  for (int i = 0; i < NUM_SENSORS; i++) \{\
    pinMode(sensorPins[i], INPUT);\
  \}\
\
  // MPU6050 initialization\
  Wire.begin();\
  mpu.initialize();\
  if (!mpu.testConnection()) \{\
    Serial.println("MPU6050 connection failed!");\
    while (1);\
  \} else \{\
    Serial.println("MPU6050 connected!");\
  \}\
\}\
\
void loop() \{\
  // Read the sensor array\
  for (int i = 0; i < NUM_SENSORS; i++) \{\
    sensorValues[i] = digitalRead(sensorPins[i]);  // Read digital values for the line\
    if (sensorValues[i] == 0) \{  // 0 for black, 1 for white\
      lineDetected = true;\
    \}\
  \}\
\
  // Calculate error for PID\
  int sumLeft = 0, sumRight = 0;\
  for (int i = 0; i < NUM_SENSORS / 2; i++) \{\
    sumLeft += sensorValues[i];\
    sumRight += sensorValues[i + NUM_SENSORS / 2];\
  \}\
  error = sumLeft - sumRight;\
\
  // Apply PID control\
  setpoint = 0;  // The goal is to have an error of 0 (perfectly aligned)\
  input = error;\
  myPID.Compute();\
\
  // Adjust motor speeds based on PID output\
  int leftSpeed = baseSpeed - output;\
  int rightSpeed = baseSpeed + output;\
\
  // Move motors based on PID output\
  leftSpeed = constrain(leftSpeed, 0, maxSpeed);\
  rightSpeed = constrain(rightSpeed, 0, maxSpeed);\
  \
  if (leftSpeed > 0) \{\
    digitalWrite(motorA1, HIGH);\
    digitalWrite(motorA2, LOW);\
  \} else \{\
    digitalWrite(motorA1, LOW);\
    digitalWrite(motorA2, HIGH);\
  \}\
  \
  if (rightSpeed > 0) \{\
    digitalWrite(motorB1, HIGH);\
    digitalWrite(motorB2, LOW);\
  \} else \{\
    digitalWrite(motorB1, LOW);\
    digitalWrite(motorB2, HIGH);\
  \}\
\
  // Check for maze and solve with A* (basic placeholder logic)\
  if (detectMaze()) \{\
    runAStar();  // Call the A* algorithm to solve the maze\
    optimizePath();  // Optimize path after the first dry run\
  \}\
\
  // Optionally, read MPU6050 data for motion tracking (for future use)\
  int16_t ax, ay, az, gx, gy, gz;\
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);\
  Serial.print("Accel X: "); Serial.print(ax);\
  Serial.print(" | Accel Y: "); Serial.print(ay);\
  Serial.print(" | Accel Z: "); Serial.println(az);\
\}\
\
bool detectMaze() \{\
  // Add maze detection logic here based on sensor data\
  // Placeholder logic\
  return false;  // Change to true when a maze is detected\
\}\
\
void runAStar() \{\
  std::vector<Node*> openSet;\
  std::vector<Node*> closedSet;\
  Node* start = new Node(0, 0, 0, 0, nullptr);  // Starting point\
  Node* goal = new Node(5, 5, 0, 0, nullptr);   // Goal point (modify as needed)\
\
  openSet.push_back(start);\
  \
  while (!openSet.empty()) \{\
    Node* current = openSet[0];\
    for (auto node : openSet) \{\
      if (node->cost + node->heuristic < current->cost + current->heuristic) \{\
        current = node;\
      \}\
    \}\
\
    if (current->x == goal->x && current->y == goal->y) \{\
      path.clear();\
      while (current != nullptr) \{\
        path.push_back(current);\
        current = current->parent;\
      \}\
      return;\
    \}\
\
    openSet.erase(std::remove(openSet.begin(), openSet.end(), current), openSet.end());\
    closedSet.push_back(current);\
\
    std::vector<Node*> neighbors = \{\
      new Node(current->x + 1, current->y, current->cost + 1, 0, current),\
      new Node(current->x - 1, current->y, current->cost + 1, 0, current),\
      new Node(current->x, current->y + 1, current->cost + 1, 0, current),\
      new Node(current->x, current->y - 1, current->cost + 1, 0, current)\
    \};\
\
    for (auto neighbor : neighbors) \{\
      if (std::find_if(closedSet.begin(), closedSet.end(), [&](Node* n) \{\
        return n->x == neighbor->x && n->y == neighbor->y;\
      \}) != closedSet.end()) \{\
        continue;\
      \}\
\
      auto it = std::find_if(openSet.begin(), openSet.end(), [&](Node* n) \{\
        return n->x == neighbor->x && n->y == neighbor->y;\
      \});\
\
      if (it == openSet.end()) \{\
        neighbor->heuristic = heuristic(neighbor, goal);\
        openSet.push_back(neighbor);\
      \}\
    \}\
  \}\
\}\
\
float heuristic(Node* a, Node* b) \{\
  return abs(a->x - b->x) + abs(a->y - b->y);\
\}\
\
void optimizePath() \{\
  if (!optimizingPath) \{\
    for (size_t i = 1; i < path.size() - 1; i++) \{\
      if ((path[i - 1]->x == path[i]->x && path[i]->x == path[i + 1]->x) ||\
          (path[i - 1]->y == path[i]->y && path[i]->y == path[i + 1]->y)) \{\
        path.erase(path.begin() + i);\
        i--;\
      \}\
    \}\
    optimizingPath = true;\
  \}\
\}}